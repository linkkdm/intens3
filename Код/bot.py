import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import pickle
from datetime import datetime, timedelta
import asyncio
import logging
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
try:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    train = pd.read_csv('traintest/train.csv', 
                       parse_dates=['dt'], 
                       index_col="dt")
    
    test = pd.read_csv('traintest/test.csv',
                      parse_dates=['dt'],
                      index_col='dt')
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ train –∏ test –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    full_data = pd.concat([train, test])
    full_data = full_data.sort_index()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ª–∞–≥–∞–º–∏
    def prepare_data(df, target_col='–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É', window=3):
        df = df.copy()
        for i in range(1, window+1):
            df[f'lag_{i}'] = df[target_col].shift(i)
        df['rolling_mean'] = df[target_col].rolling(window).mean()
        return df.dropna()
    
    processed_data = prepare_data(full_data)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    with open('rf_model.pkl', 'rb') as f:
        model = pickle.load(f)
    logger.info("Model loaded successfully")

except Exception as e:
    logger.error(f"Initialization error: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='7611697591:AAEY-sZNKJrdqgmdu5bHGDdO-mKxKlF-i4k')
dp = Dispatcher()

def get_last_available_date():
    return processed_data.index.max().date()

def prepare_features(target_date: datetime):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        target_date = target_date.date()
        last_available = get_last_available_date()
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if target_date > last_available:
            logger.info("Using last available data for future prediction")
            latest = processed_data.iloc[-1]
            return pd.DataFrame([{
                'lag_1': latest['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'],
                'lag_2': processed_data.iloc[-2]['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'],
                'lag_3': processed_data.iloc[-3]['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'],
                'rolling_mean': latest['rolling_mean']
            }])
            
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        if target_date in processed_data.index:
            return processed_data.loc[[target_date], ['lag_1', 'lag_2', 'lag_3', 'rolling_mean']]
            
        return None
        
    except Exception as e:
        logger.error(f"Feature preparation error: {e}")
        return None

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üèó –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–æ–∫ –∞—Ä–º–∞—Ç—É—Ä—ã\n\n"
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n"
        "–ü—Ä–∏–º–µ—Ä: 2024-03-25\n"
        "–Ø –ø—Ä–µ–¥—Å–∫–∞–∂—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–∫—É–ø–∫–∏!"
    )

@dp.message()
async def handle_message(message: types.Message):
    try:
        date_str = message.text.strip()
        target_date = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        if target_date.weekday() != 0:
            await message.answer("üìÖ –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º!")
            return
            
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = prepare_features(target_date)
        
        if features is None or features.isna().any().any():
            await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        prediction = model.predict(features)[0]
        weeks = max(1, min(6, int(round(prediction))))
        
        response = (
            f"üìÖ –ù–∞ –¥–∞—Ç—É {target_date.strftime('%d.%m.%Y')}\n"
            f"üìà –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–∫—É–ø–∫–∏: {weeks}\n\n"
            f"–°–æ–≤–µ—Ç: {'–£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º –∑–∞–∫—É–ø–∫–∏' if weeks > 3 else '–ó–∞–∫—É–ø–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–∞—Ä—Ç–∏—è–º–∏'}"
        )
        
        await message.answer(response)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())