import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import pickle
from datetime import datetime, timedelta
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
try:
    with open('catboost_model.pkl', 'rb') as f:
        model = pickle.load(f)
    logger.info("Model loaded successfully")

    transformed_weekly = pd.read_csv('optimized_transformed_data.csv', parse_dates=['dt'])
    train = pd.read_csv('traintest/train.csv', parse_dates=['dt'])
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    merged_data = pd.merge(train, transformed_weekly, on='dt', how='left')
    merged_data.set_index('dt', inplace=True)
    last_historical_date = merged_data.index.max()
    logger.info(f"Last available historical date: {last_historical_date}")

except Exception as e:
    logger.error(f"Initialization error: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='7611697591:AAEY-sZNKJrdqgmdu5bHGDdO-mKxKlF-i4k')
dp = Dispatcher()

def generate_future_features(target_date: datetime, last_known_data: pd.Series) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    features = {
        'price_lag_1': last_known_data['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'].iloc[-1],
        'price_lag_2': last_known_data['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'].iloc[-2],
        'price_lag_3': last_known_data['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'].iloc[-3],
        'rolling_mean_3': last_known_data['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'].rolling(3).mean().iloc[-1]
    }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è)
    for col in transformed_weekly.columns:
        if col != 'dt' and col in last_known_data.columns:
            features[col] = last_known_data[col].iloc[-1]
    
    return pd.DataFrame([features])

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üèó –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ –∞—Ä–º–∞—Ç—É—Ä—ã\n\n"
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã)\n"
        "–ü—Ä–∏–º–µ—Ä: 2024-03-25\n"
        "–Ø –ø–æ–¥—Å–∫–∞–∂—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–∫—É–ø–∫–∏!"
    )

@dp.message()
async def handle_message(message: types.Message):
    try:
        date_str = message.text.strip()
        target_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        today = datetime.now().date()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if target_date <= today:
            await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É (–ø–æ–∑–∂–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è)")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        if target_date.weekday() != 0:
            await message.answer("üìÖ –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º!")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        last_4_weeks = merged_data.last('4W')
        if len(last_4_weeks) < 3:
            await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = generate_future_features(target_date, last_4_weeks)
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        prediction = model.predict(features)[0]
        prediction = max(1, min(6, prediction))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 6 –Ω–µ–¥–µ–ª—å
        
        response = (
            f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {target_date.strftime('%d.%m.%Y')}\n"
            f"üîÆ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∑–∞–∫—É–ø–∫–∞ –Ω–∞: {prediction} –Ω–µ–¥–µ–ª—å\n\n"
            f"–°–æ–≤–µ—Ç: {'–£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–∫—É–ø–∫—É' if prediction > 3 else '–ó–∞–∫—É–ø–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–∞—Ä—Ç–∏—è–º–∏'}"
        )
        
        await message.answer(response)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n–ü—Ä–∏–º–µ—Ä: 2024-03-25")
    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())